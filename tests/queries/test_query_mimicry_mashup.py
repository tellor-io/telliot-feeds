""" Unit tests for MimicryMacroMarketMashup queries.

Copyright (c) 2021-, Tellor Development Community
Distributed under the terms of the MIT License.
"""
from eth_abi import decode

from telliot_feeds.feeds.mimicry.macro_market_mashup_feed import COLLECTIONS
from telliot_feeds.feeds.mimicry.macro_market_mashup_feed import TOKENS
from telliot_feeds.queries.mimicry.macro_market_mash_up import MimicryMacroMarketMashup

# example data from spec example
# see: https://github.com/tellor-io/dataSpecs/blob/main/types/MimicryMacroMarketMashup.md


q = MimicryMacroMarketMashup(metric="market-cap", currency="usd", collections=COLLECTIONS, tokens=TOKENS)


def test_query_constructor():
    """Validate MimicryMacroMarketMashup query."""
    # query data from spec example
    # see: https://github.com/tellor-io/dataSpecs/blob/main/types/MimicryMacroMarketMashup.md
    exp_query_data = bytes.fromhex(
        "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000184d696d696372794d6163726f4d61726b65744d617368757000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000a6d61726b65742d63617000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000375736400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004000000000000000000000000050f5474724e0ee42d9a4e711ccfb275809fd6d4a0000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e6574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d0000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000034d85c9cdeb23fa97cb08333b511ac86e1c4e2580000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e6574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000003845badade8e6dff049820680d1f14bd3903a5d00000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000473616e6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc9420000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e65740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d616e6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000000000000000000000000000000000000000000010657468657265756d2d6d61696e6e65740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036170650000000000000000000000000000000000000000000000000000000000"  # noqa: E501
    )
    assert q.query_data == exp_query_data

    query_type, _ = decode(["string", "bytes"], q.query_data)
    assert query_type == "MimicryMacroMarketMashup"

    query: MimicryMacroMarketMashup = q.get_query_from_data(q.query_data)
    # Convert the decoded list to a tuple.
    # The ABI encoding does not differentiate between tuples and lists,
    # so after decoding, the result is a list. We convert it back to a tuple
    # for a correct comparison with the original tuple.
    assert query.metric == "market-cap"
    assert query.currency == "usd"
    assert [tuple(lis) for lis in query.collections] == COLLECTIONS
    assert [tuple(lis) for lis in query.tokens] == TOKENS


def test_encode_decode_reported_val():
    """Ensure expected encoding/decoding behavior."""
    data = 5651912485  # example reported metric

    submit_value = q.value_type.encode(data)
    assert isinstance(submit_value, bytes)

    decoded_data = q.value_type.decode(submit_value)

    assert isinstance(decoded_data, int)

    assert decoded_data == 5651912485
